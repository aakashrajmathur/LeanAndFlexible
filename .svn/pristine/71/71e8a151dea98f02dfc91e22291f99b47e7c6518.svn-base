using System;
using System.Collections.Generic;
using System.Windows;

namespace NewHorizons
{
    internal class DataImport
    {
        public DataImport()
        {
        }
        public Study ImportFromCSVFile(string filePath)
        {
            Study study = new Study();

            PopulateMachines(filePath, study);
            PopulateParts(filePath, study);
            //study.ComputeDefaultSelections();

            return study;
        }

        private void PopulateMachines(string filePath, Study study)
        {
            int counter = 0;
            string line;

            HashSet<string> machines = new HashSet<string>();
            try
            {
                System.IO.StreamReader file = new System.IO.StreamReader(filePath);
                while ((line = file.ReadLine()) != null)
                {
                    if (counter > 0)
                    {
                        string[] tokens = line.Split(',');
                        string[] machineTokens = tokens[4].Split(new string[] { "->" }, StringSplitOptions.None);

                        foreach (String s in machineTokens)
                        {
                            machines.Add(s);
                        }
                    }

                    counter++;
                }
                file.Close();

            }
            catch (Exception e)
            {
                MessageBox.Show(e.StackTrace.ToString());
            }
            ///////////////////////
            foreach (String s in machines)
            {
                study.machines.Add(new Machine(s));
            }

        }

        private void PopulateParts(string filePath, Study study)
        {
            int counter = 0;
            string line;

            System.IO.StreamReader file = new System.IO.StreamReader(filePath);
            while ((line = file.ReadLine()) != null)
            {
                if (counter > 0)
                {
                    Part part = new Part();

                    string[] tokens = line.Split(',');
                    part.name = tokens[1];
                    part.quantity = Convert.ToSingle(tokens[2]);
                    part.revenue = Convert.ToSingle(tokens[3]);

                    string[] machineTokens = tokens[4].Split(new string[] { "->" }, StringSplitOptions.None);

                    foreach (String s in machineTokens)
                    {
                        Machine currentMachine = GetMachineFromExistingListInStudy(s, study);
                        if (currentMachine != null)
                        {
                            part.routing.Add(currentMachine);
                        }
                    }

                    study.parts.Add(part);
                }
                counter++;
            }
        }

        Machine GetMachineFromExistingListInStudy(string machineName, Study study)
        {
            foreach (Machine m in study.machines)
            {
                if (m.name.CompareTo(machineName) == 0)
                {
                    return m;
                }
            }
            return null;
        }

    }
}