using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace NewHorizons
{
    /// <summary>
    /// Interaction logic for StudioUserControl.xaml
    /// </summary>
    public partial class StudioUserControl : UserControl
    {
        Selection selection;
        bool _isRectDragInProg;

        Dictionary<Part, UIElement> partRectangleDictionary;

        public StudioUserControl()
        {
            InitializeComponent();
            partRectangleDictionary = new Dictionary<Part, UIElement>();
        }

        public void updateUI(Selection selection)
        {
            this.selection = selection;

            if (selection != null)
            {
                //Foreach part in AlwaysSelected + Selected lists, draw a rectangle.

                DrawRectangles();
                DrawLinesBetweenRectangles();
            }
        }

        private void DrawLinesBetweenRectangles()
        {
            List<Line> lineThatNeedToBeRemoved = new List<Line>();
            foreach(UIElement e in studioCanvas.Children)
            {
                if(e is Line)
                {
                    lineThatNeedToBeRemoved.Add((Line)e);
                }
            }

            foreach(Line l in lineThatNeedToBeRemoved)
            {
                studioCanvas.Children.Remove(l);
            }

            UIElement e1 = partRectangleDictionary[selection.partsIncluded[0]];
            double firstTop = Canvas.GetTop(e1);
            double firstLeft = Canvas.GetLeft(e1);

            double x1 = studioCanvas.ActualHeight - firstTop - 10;
            double y1 = firstLeft + 10;

            Point topRight1 = e1.TranslatePoint(new Point(((Rectangle)(e1)).ActualWidth, 0), studioCanvas);

            UIElement e2 = partRectangleDictionary[selection.partsIncluded[1]];
            double Top2 = Canvas.GetTop(e2);
            double Left2 = Canvas.GetLeft(e2);

            double x2 = studioCanvas.ActualHeight - Top2 - 10;
            double y2 = Left2 + 10;
            Point topRight2 = e2.TranslatePoint(new Point(((Rectangle)(e2)).ActualWidth, 0), studioCanvas);

            Line line = new Line()
            {
                X1 = topRight1.X-10, X2 = topRight2.X - 10, Y1 = topRight1.Y + 10, Y2 = topRight2.Y + 10,
                Stroke = Brushes.Red,
                StrokeThickness = 5
            };
            studioCanvas.Children.Add(line);
        }

        private void DrawRectangles()
        {
            partRectangleDictionary.Clear();
            int count = 1;
            foreach(Part p in selection.partsAlwaysIncluded)
            {
                var rect1 = new Rectangle
                {
                    Stroke = new SolidColorBrush(Colors.Red),
                    Fill = new SolidColorBrush(Colors.Black),
                    Width = 20,
                    Height = 20,
                    VerticalAlignment = System.Windows.VerticalAlignment.Top,
                    HorizontalAlignment = System.Windows.HorizontalAlignment.Left,
                };

                rect1.MouseLeftButtonDown += Rect_MouseLeftButtonDown;
                rect1.MouseLeftButtonUp += Rect_MouseLeftButtonUp;
                rect1.MouseMove += Rect_MouseMove;

                studioCanvas.Children.Add(rect1);
                Canvas.SetLeft(rect1, 10 * count);
                Canvas.SetTop(rect1, 10 * count);

                partRectangleDictionary.Add(p, rect1);
                count++;
            }

            foreach (Part p in selection.partsIncluded)
            {
                var rect1 = new Rectangle
                {
                    Stroke = new SolidColorBrush(Colors.Red),
                    Fill = new SolidColorBrush(Colors.Black),
                    Width = 20,
                    Height = 20,
                    VerticalAlignment = System.Windows.VerticalAlignment.Top,
                    HorizontalAlignment = System.Windows.HorizontalAlignment.Left,
                };

                rect1.MouseLeftButtonDown += Rect_MouseLeftButtonDown;
                rect1.MouseLeftButtonUp += Rect_MouseLeftButtonUp;
                rect1.MouseMove += Rect_MouseMove;

                studioCanvas.Children.Add(rect1);
                Canvas.SetLeft(rect1, 10 * count);
                Canvas.SetTop(rect1, 10 * count);

                partRectangleDictionary.Add(p, rect1);
                count++;
            }
        }

        private void Rect_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            _isRectDragInProg = true;
            ((UIElement)sender).CaptureMouse();
        }

        private void Rect_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            _isRectDragInProg = false;
            ((UIElement)sender).ReleaseMouseCapture();
        }

        private void Rect_MouseMove(object sender, MouseEventArgs e)
        {
            if (!_isRectDragInProg) return;

            // get the position of the mouse relative to the Canvas
            var mousePos = e.GetPosition(studioCanvas);
            
            // center the rect on the mouse
            double left = mousePos.X - (((System.Windows.Shapes.Rectangle)sender).ActualWidth / 2);
            double top = mousePos.Y - (((System.Windows.Shapes.Rectangle)sender).ActualHeight / 2);
            Canvas.SetLeft(((System.Windows.Shapes.Rectangle)sender), left);
            Canvas.SetTop(((System.Windows.Shapes.Rectangle)sender), top);

            DrawLinesBetweenRectangles();
        }
    }
}
