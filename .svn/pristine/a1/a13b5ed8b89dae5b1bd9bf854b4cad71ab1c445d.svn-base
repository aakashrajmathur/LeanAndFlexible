using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace NewHorizons
{
    /// <summary>
    /// Interaction logic for StudioUserControl.xaml
    /// </summary>
    public partial class StudioUserControl : UserControl
    {
        Selection selection;
        bool _isRectDragInProg;

        Dictionary<Part, UIElement> partRectangleDictionary;

        public StudioUserControl()
        {
            InitializeComponent();
            partRectangleDictionary = new Dictionary<Part, UIElement>();
        }

        public void updateUI(Selection selection)
        {
            this.selection = selection;

            if (selection != null)
            {
                //Foreach part in AlwaysSelected + Selected lists, draw a rectangle.

                DrawRectangles();
                DrawLinesBetweenRectangles();
            }
        }

        private void DrawLinesBetweenRectangles()
        {
            List<Line> lineThatNeedToBeRemoved = new List<Line>();
            foreach(UIElement e in studioCanvas.Children)
            {
                if(e is Line)
                {
                    lineThatNeedToBeRemoved.Add((Line)e);
                }
            }

            foreach(Line l in lineThatNeedToBeRemoved)
            {
                studioCanvas.Children.Remove(l);
            }

            UIElement e1 = partRectangleDictionary[selection.partsIncluded[0]];
            double firstTop = Canvas.GetTop(e1);
            double firstLeft = Canvas.GetLeft(e1);

            double x1 = studioCanvas.ActualHeight - firstTop - 10;
            double y1 = firstLeft + 10;

            Point topRight1 = e1.TranslatePoint(new Point(((Rectangle)(e1)).ActualWidth, 0), studioCanvas);

            UIElement e2 = partRectangleDictionary[selection.partsIncluded[1]];
            double Top2 = Canvas.GetTop(e2);
            double Left2 = Canvas.GetLeft(e2);

            double x2 = studioCanvas.ActualHeight - Top2 - 10;
            double y2 = Left2 + 10;
            Point topRight2 = e2.TranslatePoint(new Point(((Rectangle)(e2)).ActualWidth, 0), studioCanvas);

            Line line = new Line()
            {
                X1 = topRight1.X-10, X2 = topRight2.X - 10, Y1 = topRight1.Y + 10, Y2 = topRight2.Y + 10,
                Stroke = Brushes.Red,
                StrokeThickness = 5
            };
            studioCanvas.Children.Add(line);
        }

        private void DrawRectangles()
        {
            partRectangleDictionary.Clear();
            int count = 1;
            foreach(Part p in selection.partsAlwaysIncluded)
            {
                var rect1 = new Rectangle
                {
                    Stroke = new SolidColorBrush(Colors.Black),
                    Fill = new SolidColorBrush(Colors.Red),
                    Width = 20,
                    Height = 20,
                    VerticalAlignment = System.Windows.VerticalAlignment.Top,
                    HorizontalAlignment = System.Windows.HorizontalAlignment.Left,
                };

                TextBlock textBlock1 = new TextBlock
                {
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center,
                    FontSize = 12,
                    Text = count.ToString()
                };

                Grid grid = new Grid
                {
                    Height = 20,
                    Width = 20
                };

                grid.MouseLeftButtonDown += Rect_MouseLeftButtonDown;
                grid.MouseLeftButtonUp += Rect_MouseLeftButtonUp;
                grid.MouseMove += Rect_MouseMove;

                grid.Children.Add(rect1);
                grid.Children.Add(textBlock1);

                studioCanvas.Children.Add(grid);
                Canvas.SetLeft(grid, 10 * count);
                Canvas.SetTop(grid, 10 * count);

                partRectangleDictionary.Add(p, rect1);
                count++;
            }

            foreach (Part p in selection.partsIncluded)
            {
                var rect1 = new Rectangle
                {
                    Stroke = new SolidColorBrush(Colors.Black),
                    Fill = new SolidColorBrush(Colors.Red),
                    Width = 20,
                    Height = 20,
                    VerticalAlignment = System.Windows.VerticalAlignment.Top,
                    HorizontalAlignment = System.Windows.HorizontalAlignment.Left,
                };
                
                TextBlock textBlock1 = new TextBlock
                {
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center,
                    FontSize = 12,
                    Text = count.ToString()
                };

                Grid grid = new Grid
                {
                    Height = 20,
                    Width = 20
                };

                grid.Children.Add(rect1);
                grid.Children.Add(textBlock1);

                grid.MouseLeftButtonDown += Rect_MouseLeftButtonDown;
                grid.MouseLeftButtonUp += Rect_MouseLeftButtonUp;
                grid.MouseMove += Rect_MouseMove;

                studioCanvas.Children.Add(grid);
                Canvas.SetLeft(grid, 10 * count);
                Canvas.SetTop(grid, 10 * count);

                partRectangleDictionary.Add(p, rect1);
                count++;
            }

            //Add the Path Element
            Path myPath = new Path();
            myPath.Stroke = System.Windows.Media.Brushes.Black;
            myPath.Fill = System.Windows.Media.Brushes.MediumSlateBlue;
            myPath.StrokeThickness = 4;
            myPath.HorizontalAlignment = HorizontalAlignment.Left;
            myPath.VerticalAlignment = VerticalAlignment.Center;

            
            EllipseGeometry myEllipseGeometry = new EllipseGeometry();
            myEllipseGeometry.Center = new System.Windows.Point(50, 50);
            myEllipseGeometry.RadiusX = 25;
            myEllipseGeometry.RadiusY = 25;
            myPath.Data = myEllipseGeometry;

            //ArcSegment myArcSegment = new ArcSegment(   new Point(300, 200),
                      //                                          new Size(700, 100),
                    //                                            90,
                  //                                              false,
                //                                                SweepDirection.Clockwise,
               //                                                 true
              //                                                  );
            //
            //myPath.Data = myArcSegment;
            //studioCanvas.Children.Add(myPath);

            /*
            <Path Stroke="Black" StrokeThickness="3">
            <Path.Data>
                <PathGeometry>
                    <PathGeometry.Figures>
                        <PathFigure StartPoint="40,100" IsClosed="False">
                            <ArcSegment Point="200,100" Size="80 50"/>
                        </PathFigure>
                    </PathGeometry.Figures>
                </PathGeometry>
            </Path.Data>
        </Path>
            * /
            Path anotherPath = new Path()
            {
                Stroke = Brushes.Black, StrokeThickness = 3
            };
            //PathGeometry pathGeo = new PathGeometry( new PathFigure( new Point(40, 100), new IEnumerable<> new ArcSegment(new Point(200, 100), new Size(80, 50), 0, false, SweepDirection.Clockwise, false) , false);
            PathGeometry pathGeo = new PathGeometry();

            PathFigure pathFigure = new PathFigure();
            pathFigure.StartPoint = new Point(200, 200);
            pathFigure.IsClosed = false; //true;
            pathFigure.Segments.Add(new ArcSegment(new Point(300, 200), new Size(100, 100), 0, false, SweepDirection.Counterclockwise, true));
            //pathFigure.Segments.Add(new ArcSegment(new Point(300, 200), new Size(100, 100), 0, false, SweepDirection.Clockwise, true));
            //pathFigure.Segments.Add(new LineSegment(new Point(300, 300), true));

            pathGeo.Figures.Add(pathFigure);
            anotherPath.Data = pathGeo;
            //studioCanvas.Children.Add(anotherPath);

            Path yetAnotherPath = new Path()
            {
                Stroke = Brushes.Black,
                StrokeThickness = 3
            };
            //PathGeometry pathGeo = new PathGeometry( new PathFigure( new Point(40, 100), new IEnumerable<> new ArcSegment(new Point(200, 100), new Size(80, 50), 0, false, SweepDirection.Clockwise, false) , false);
            PathGeometry pathGeo2 = new PathGeometry();

            PathFigure pathFigure2 = new PathFigure();
            pathFigure2.StartPoint = new Point(200, 200);
            pathFigure2.IsClosed = false; //true;
            pathFigure2.Segments.Add(new ArcSegment(new Point(0, 0), new Size(100, 100), 0, false, SweepDirection.Clockwise, true));
           
            pathGeo2.Figures.Add(pathFigure2);
            yetAnotherPath.Data = pathGeo2;
            //studioCanvas.Children.Add(yetAnotherPath);

            /*<local:CappedLine BeginCap="M0,0 L6,-6 L6,6 z" EndCap="M0,-3 L0,3 L6,3 L6,-3 z" Stroke="Red" StrokeThickness="1" Canvas.Left="40" Canvas.Top="60">
                <local:CappedLine.LinePath>
                    <PathGeometry Figures = "M0,0 L120,120"/>
                </local:CappedLine.LinePath>
            </local:CappedLine>* /

            CappedLine cappedLine = new CappedLine();
            cappedLine.BeginCap = Geometry.Parse("M0,0 L6,-6 L6,6 z");
            cappedLine.EndCap = Geometry.Parse("M0,-3 L0,3 L6,3 L6,-3 z");
            cappedLine.Stroke = Brushes.Black;
            cappedLine.StrokeThickness = 1;

            Path myPath2 = new Path();
            myPath2.Stroke = System.Windows.Media.Brushes.Black;
            myPath2.Fill = System.Windows.Media.Brushes.MediumSlateBlue;
            myPath2.StrokeThickness = 4;
            myPath2.HorizontalAlignment = HorizontalAlignment.Left;
            myPath2.VerticalAlignment = VerticalAlignment.Center;
            EllipseGeometry myEllipseGeometry2 = new EllipseGeometry();
            myEllipseGeometry2.Center = new System.Windows.Point(50, 50);
            myEllipseGeometry2.RadiusX = 25;
            myEllipseGeometry2.RadiusY = 25;
            myPath2.Data = myEllipseGeometry2;*/

            //cappedLine.LinePath = myEllipseGeometry2;

     //       Canvas.SetLeft(cappedLine, 0);
      //      Canvas.SetTop(cappedLine, 0);
       //     studioCanvas.Children.Add(cappedLine);

            studioCanvas.Children.Add(GetCappedLine(800, 100, 400, 400, SweepDirection.Clockwise));
            studioCanvas.Children.Add(GetCappedLine(800, 100, 400, 400, SweepDirection.Counterclockwise));

        }

        private CappedLine GetCappedLine(int x1, int y1, int x2, int y2, SweepDirection sweepDirection)
        {
            CappedLine cappedLine = new CappedLine()
            {
                BeginCap = Geometry.Parse("M0,0 L6,-6 L6,6 z"),
                EndCap = Geometry.Parse("M0,-3 L0,3 L6,3 L6,-3 z"),
                Stroke = Brushes.Black,
                StrokeThickness = 1,
            };

            double distance = Math.Sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));

            ArcSegment arcSegament = new ArcSegment(new Point(x2, y2), new Size(distance, distance), 0, false, sweepDirection, true);
            PathFigure pathFigure = new PathFigure();
            pathFigure.StartPoint = new Point(x1, y1);
            pathFigure.Segments.Add(arcSegament);
            PathGeometry pathGeometry = new PathGeometry();
            pathGeometry.Figures.Add(pathFigure);
            cappedLine.LinePath = pathGeometry;

            return cappedLine;
        }

        private void Rect_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            _isRectDragInProg = true;
            ((System.Windows.Controls.Grid)sender).CaptureMouse();
        }

        private void Rect_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            _isRectDragInProg = false;
            ((System.Windows.Controls.Grid)sender).ReleaseMouseCapture();
        }

        private void Rect_MouseMove(object sender, MouseEventArgs e)
        {
            if (!_isRectDragInProg) return;

            // get the position of the mouse relative to the Canvas
            var mousePos = e.GetPosition(studioCanvas);
            
            // center the rect on the mouse
            double left = mousePos.X - (((System.Windows.Controls.Grid)sender).ActualWidth / 2);
            double top = mousePos.Y - (((System.Windows.Controls.Grid)sender).ActualHeight / 2);
            Canvas.SetLeft(((System.Windows.Controls.Grid)sender), left);
            Canvas.SetTop(((System.Windows.Controls.Grid)sender), top);

            DrawLinesBetweenRectangles();
        }
    }
}
