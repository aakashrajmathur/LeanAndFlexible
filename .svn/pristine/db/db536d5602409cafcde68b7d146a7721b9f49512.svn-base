using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FlowAssessmentTool
{
    public class Part : IComparable<Part>
    {
        public string name;
        public float revenue;
        public float quantity;
        public List<Machine> routing;

        public Part()
        {
            this.routing = new List<Machine>();
        }

        public override string ToString()
        {
            return name + " - " + revenue.ToString() + " - " + quantity.ToString();
        }

        public string ToJSONString()
        {
            //Panding...
            return "";
        }

        public string ToXML()
        {
            string temp = "<Part>" + Environment.NewLine;
            temp += "<Name>" + name + "</Name>" + Environment.NewLine;
            temp += "<Revenue>" + revenue + "</Revenue>" + Environment.NewLine;
            temp += "<Quantity>" + quantity + "</Quantity>" + Environment.NewLine;

            foreach (Machine m in routing)
            {
                temp += m.ToXML();
            }
            temp += "</Part>" + Environment.NewLine;
            return temp;
        }

        public int CompareTo(Part otherPart)
        {
            if (this.name.CompareTo(otherPart.name) != 0)
                return -1;
            if (this.quantity != otherPart.quantity)
                return -1;
            if (this.revenue != otherPart.revenue)
                return -1;
            for (int i = 0; i < this.routing.Count; i++)
            {
                if (this.routing[i].CompareTo(otherPart.routing[i]) != 0)
                    return -1;
            }
            return 0;
        }

        public int CompareTo(string currentPartName, string currentPartRevenue, string currentPartQuantity, List<Machine> currentRouting)
        {
            if (this.name.CompareTo(currentPartName) != 0)
                return -1;
            if (this.quantity != float.Parse(currentPartQuantity))
                return -1;
            if (this.revenue != float.Parse(currentPartRevenue))
                return -1;
            for (int i = 0; i < this.routing.Count; i++)
            {
                if (this.routing[i].CompareTo(currentRouting[i]) != 0)
                    return -1;
            }
            return 0;
        }
    }
}
